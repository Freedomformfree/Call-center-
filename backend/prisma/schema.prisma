// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        String   @default("AGENT")
  tenantId    String
  avatar      String?
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  permissions UserPermission[]
  preferences UserPreferences?
  sessions    UserSession[]
  calls       Call[]
  campaigns   Campaign[]
  customers   Customer[]

  @@map("users")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  isActive    Boolean  @default(true)
  settings    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
  calls       Call[]
  campaigns   Campaign[]
  customers   Customer[]

  @@map("tenants")
}

model UserPermission {
  id         String @id @default(cuid())
  userId     String
  permission String
  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("user_permissions")
}

model UserPreferences {
  id            String  @id @default(cuid())
  userId        String  @unique
  theme         String  @default("system")
  language      String  @default("en")
  timezone      String  @default("UTC")
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  pushNotifications  Boolean @default(true)
  
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  refreshToken String? @unique
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Customer {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  firstName   String
  lastName    String
  email       String?
  phone       String
  address     String?
  tags        String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  calls       Call[]
  campaigns   CampaignCustomer[]

  @@map("customers")
}

model Campaign {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  name        String
  description String?
  type        String
  status      String   @default("DRAFT")
  startDate   DateTime?
  endDate     DateTime?
  settings    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  customers   CampaignCustomer[]
  calls       Call[]

  @@map("campaigns")
}

model CampaignCustomer {
  id         String @id @default(cuid())
  campaignId String
  customerId String
  status     String @default("pending")
  priority   Int    @default(1)
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([campaignId, customerId])
  @@map("campaign_customers")
}

model Call {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  customerId  String?
  campaignId  String?
  phoneNumber String
  direction   String
  status      String
  duration    Int?     // in seconds
  recording   String?  // URL to recording
  transcript  String?
  sentiment   String?
  outcome     String?
  notes       String?
  metadata    String?
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("calls")
}

model Analytics {
  id          String   @id @default(cuid())
  tenantId    String
  date        DateTime
  metric      String
  value       Float
  metadata    String?
  createdAt   DateTime @default(now())

  @@unique([tenantId, date, metric])
  @@map("analytics")
}

model SystemMetrics {
  id          String   @id @default(cuid())
  metric      String
  value       Float
  timestamp   DateTime @default(now())
  metadata    String?

  @@map("system_metrics")
}