#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è VoiceConnect Pro
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ø–æ—á–∫—É –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List
from uuid import uuid4

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, RedirectResponse
import uvicorn

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="VoiceConnect Pro - Demo",
    description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –ò–ò —Ñ—É–Ω–∫—Ü–∏–π",
    version="1.0.0"
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
demo_data = {
    "registrations": {},
    "users": {},
    "temp_assignments": {},
    "ai_functions": {
        "email_sender": {"name": "Email –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "active": True},
        "sms_sender": {"name": "SMS –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "active": True},
        "lead_qualifier": {"name": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–æ–≤", "active": True},
        "payment_processor": {"name": "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", "active": True},
        "taxi_booking": {"name": "–ó–∞–∫–∞–∑ —Ç–∞–∫—Å–∏", "active": True},
        "weather_checker": {"name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã", "active": True},
        "translator": {"name": "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "active": True},
        "scheduler": {"name": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", "active": True}
    }
}

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
try:
    app.mount("/static", StaticFiles(directory="frontend"), name="static")
except:
    pass

@app.get("/flow")
async def flow_diagram():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏"""
    return RedirectResponse(url="/static/flow-diagram.html")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return RedirectResponse(url="/static/index.html")

# ==================== –≠–¢–ê–ü 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê ====================

@app.post("/api/v1/registration/start")
async def start_registration(registration_data: dict):
    """
    –≠–¢–ê–ü 1.1: –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ö–ª–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –Ω–∞ frontend/index.html
    2. JavaScript –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç
    3. –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SMS –∫–æ–¥
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ SIM800C –º–æ–¥—É–ª–∏
    """
    try:
        email = registration_data.get("email")
        password = registration_data.get("password")
        phone = registration_data.get("phone")
        
        if not all([email, password, phone]):
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_id = str(uuid4())
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SMS –∫–æ–¥
        sms_code = "123456"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        demo_data["registrations"][registration_id] = {
            "email": email,
            "password": password,
            "phone": phone,
            "sms_code": sms_code,
            "created_at": datetime.now().isoformat(),
            "expires_at": (datetime.now() + timedelta(minutes=10)).isoformat(),
            "verified": False,
            "attempts": 0
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS —á–µ—Ä–µ–∑ SIM800C
        print(f"üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {sms_code}")
        
        return {
            "success": True,
            "registration_id": registration_id,
            "message": "SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä",
            "expires_in_minutes": 10,
            "step": "sms_verification"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

@app.post("/api/v1/registration/verify-sms")
async def verify_sms_code(verification_data: dict):
    """
    –≠–¢–ê–ü 1.2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–∞
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ö–ª–∏–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç SMS –∫–æ–¥ –≤ —Ñ–æ—Ä–º–µ
    2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ —á–µ—Ä–µ–∑ SIM800C –º–æ–¥—É–ª–∏
    3. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω
    """
    try:
        registration_id = verification_data.get("registration_id")
        sms_code = verification_data.get("sms_code")
        
        if not all([registration_id, sms_code]):
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration = demo_data["registrations"].get(registration_id)
        if not registration:
            raise HTTPException(status_code=404, detail="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if registration["sms_code"] != sms_code:
            registration["attempts"] += 1
            if registration["attempts"] >= 3:
                raise HTTPException(status_code=429, detail="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(uuid4())
        demo_data["users"][user_id] = {
            "id": user_id,
            "email": registration["email"],
            "phone": registration["phone"],
            "created_at": datetime.now().isoformat(),
            "verified": True,
            "subscription_status": "trial",
            "ai_functions_enabled": False
        }
        
        # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        registration["verified"] = True
        registration["user_id"] = user_id
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {registration['email']} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        return {
            "success": True,
            "user_id": user_id,
            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "step": "temp_phone_assignment"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

# ==================== –≠–¢–ê–ü 2: –í–†–ï–ú–ï–ù–ù–´–ô –ù–û–ú–ï–† –î–õ–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò ====================

@app.post("/api/v1/consultation/assign-temp-phone")
async def assign_temp_phone(request_data: dict):
    """
    –≠–¢–ê–ü 2.1: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    2. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç
    3. –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ò–ò
    """
    try:
        user_id = request_data.get("user_id")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
        
        user = demo_data["users"].get(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        temp_phone = "+998901234567"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∏–∑ –ø—É–ª–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        assignment_id = str(uuid4())
        expires_at = datetime.now() + timedelta(minutes=30)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        demo_data["temp_assignments"][assignment_id] = {
            "user_id": user_id,
            "phone_number": temp_phone,
            "assigned_at": datetime.now().isoformat(),
            "expires_at": expires_at.isoformat(),
            "active": True,
            "consultation_completed": False
        }
        
        print(f"üìû –í—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä {temp_phone} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['email']} –Ω–∞ 30 –º–∏–Ω—É—Ç")
        
        return {
            "success": True,
            "temp_phone": temp_phone,
            "expires_at": expires_at.isoformat(),
            "minutes_remaining": 30,
            "message": "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ò–ò",
            "step": "ai_consultation"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {str(e)}")

# ==================== –≠–¢–ê–ü 3: –ò–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø ====================

@app.post("/api/v1/consultation/simulate-call")
async def simulate_ai_consultation(call_data: dict):
    """
    –≠–¢–ê–ü 3.1: –°–∏–º—É–ª—è—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ö–ª–∏–µ–Ω—Ç –∑–≤–æ–Ω–∏—Ç –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    2. SIM800C –º–æ–¥—É–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–≤–æ–Ω–æ–∫
    3. –ì–æ–ª–æ—Å–æ–≤–æ–π –º–æ—Å—Ç (voice-bridge) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ
    4. Gemini API –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
    5. TTS –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ä–µ—á—å
    """
    try:
        user_id = call_data.get("user_id")
        phone_number = call_data.get("phone_number")
        
        if not all([user_id, phone_number]):
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignment = None
        for assign_id, assign_data in demo_data["temp_assignments"].items():
            if assign_data["user_id"] == user_id and assign_data["phone_number"] == phone_number:
                assignment = assign_data
                break
        
        if not assignment:
            raise HTTPException(status_code=404, detail="–í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_result = {
            "call_duration": "5:23",
            "client_needs": [
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤",
                "SMS —Ä–∞—Å—Å—ã–ª–∫–∏",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM"
            ],
            "recommended_features": [
                "email_sender",
                "sms_sender", 
                "lead_qualifier",
                "payment_processor"
            ],
            "sentiment_score": 0.85,
            "interest_level": "high",
            "budget_range": "$50-100/month",
            "decision_timeline": "within_week"
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignment["consultation_completed"] = True
        assignment["consultation_result"] = consultation_result
        
        print(f"ü§ñ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"   –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: {', '.join(consultation_result['client_needs'])}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(consultation_result['recommended_features'])}")
        
        return {
            "success": True,
            "consultation_result": consultation_result,
            "message": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
            "step": "subscription_offer"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {str(e)}")

# ==================== –≠–¢–ê–ü 4: –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò ====================

@app.post("/api/v1/subscription/create-offer")
async def create_subscription_offer(offer_data: dict):
    """
    –≠–¢–ê–ü 4.1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ù–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        user_id = offer_data.get("user_id")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
        
        user = demo_data["users"].get(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        consultation_result = None
        for assignment in demo_data["temp_assignments"].values():
            if assignment["user_id"] == user_id and assignment.get("consultation_result"):
                consultation_result = assignment["consultation_result"]
                break
        
        if not consultation_result:
            raise HTTPException(status_code=404, detail="–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        recommended_functions = consultation_result["recommended_features"]
        base_price = 20.0
        function_price = len(recommended_functions) * 5.0
        total_price = base_price + function_price
        
        subscription_offer = {
            "plan_name": "VoiceConnect Pro - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π",
            "monthly_price": total_price,
            "currency": "USD",
            "included_functions": recommended_functions,
            "features": [
                "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏ SMS",
                "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ SIM800C –º–æ–¥—É–ª–∏", 
                "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                "24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ email"
            ],
            "trial_period": 14,
            "discount": 20 if consultation_result["interest_level"] == "high" else 0
        }
        
        if subscription_offer["discount"] > 0:
            subscription_offer["discounted_price"] = total_price * (1 - subscription_offer["discount"] / 100)
        
        print(f"üí∞ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user['email']}")
        print(f"   –ü–ª–∞–Ω: {subscription_offer['plan_name']}")
        print(f"   –¶–µ–Ω–∞: ${subscription_offer['monthly_price']}/–º–µ—Å—è—Ü")
        print(f"   –§—É–Ω–∫—Ü–∏–∏: {', '.join(recommended_functions)}")
        
        return {
            "success": True,
            "subscription_offer": subscription_offer,
            "message": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ",
            "step": "payment_processing"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

# ==================== –≠–¢–ê–ü 5: –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ê ====================

@app.post("/api/v1/payment/process-subscription")
async def process_subscription_payment(payment_data: dict):
    """
    –≠–¢–ê–ü 5.1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ö–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Click API (–¥–ª—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞)
    3. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞
    4. –í–∫–ª—é—á–∞—é—Ç—Å—è –ò–ò –∞–≥–µ–Ω—Ç—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        user_id = payment_data.get("user_id")
        payment_method = payment_data.get("payment_method", "click")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
        
        user = demo_data["users"].get(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Click API
        payment_result = {
            "transaction_id": f"click_{uuid4().hex[:12]}",
            "status": "completed",
            "amount": payment_data.get("amount", 20.0),
            "currency": "USD",
            "payment_method": payment_method,
            "processed_at": datetime.now().isoformat()
        }
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user["subscription_status"] = "active"
        user["subscription_started_at"] = datetime.now().isoformat()
        user["subscription_expires_at"] = (datetime.now() + timedelta(days=30)).isoformat()
        user["ai_functions_enabled"] = True
        user["payment_info"] = payment_result
        
        print(f"üí≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {user['email']}")
        print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {payment_result['transaction_id']}")
        print(f"   –°—É–º–º–∞: ${payment_result['amount']}")
        print(f"   –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user['subscription_expires_at']}")
        
        return {
            "success": True,
            "payment_result": payment_result,
            "subscription_status": "active",
            "message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            "step": "ai_functions_activation"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")

# ==================== –≠–¢–ê–ü 6: –ê–ö–¢–ò–í–ê–¶–ò–Ø –ò–ò –§–£–ù–ö–¶–ò–ô ====================

@app.post("/api/v1/ai-functions/activate")
async def activate_ai_functions(activation_data: dict):
    """
    –≠–¢–ê–ü 6.1: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ò–ò –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏
    2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    3. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≥–µ–Ω—Ç—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        user_id = activation_data.get("user_id")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
        
        user = demo_data["users"].get(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not user.get("ai_functions_enabled"):
            raise HTTPException(status_code=403, detail="–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        recommended_functions = []
        for assignment in demo_data["temp_assignments"].values():
            if assignment["user_id"] == user_id and assignment.get("consultation_result"):
                recommended_functions = assignment["consultation_result"]["recommended_features"]
                break
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        activated_functions = {}
        for func_id in recommended_functions:
            if func_id in demo_data["ai_functions"]:
                activated_functions[func_id] = {
                    **demo_data["ai_functions"][func_id],
                    "activated_at": datetime.now().isoformat(),
                    "usage_count": 0
                }
        
        user["activated_functions"] = activated_functions
        
        print(f"ü§ñ –ò–ò —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {user['email']}")
        print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(activated_functions.keys())}")
        
        return {
            "success": True,
            "activated_functions": activated_functions,
            "dashboard_url": "/dashboard",
            "message": "–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VoiceConnect Pro!",
            "step": "complete"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {str(e)}")

# ==================== –≠–¢–ê–ü 7: –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ò–ò –§–£–ù–ö–¶–ò–ô ====================

@app.post("/api/v1/ai-functions/execute")
async def execute_ai_function(execution_data: dict):
    """
    –≠–¢–ê–ü 7.1: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
    –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    3. –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö API
    4. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        user_id = execution_data.get("user_id")
        function_id = execution_data.get("function_id")
        parameters = execution_data.get("parameters", {})
        
        if not all([user_id, function_id]):
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        user = demo_data["users"].get(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not user.get("ai_functions_enabled"):
            raise HTTPException(status_code=403, detail="–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        
        activated_functions = user.get("activated_functions", {})
        if function_id not in activated_functions:
            raise HTTPException(status_code=403, detail="–§—É–Ω–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        execution_results = {
            "email_sender": {
                "emails_sent": parameters.get("recipient_count", 1),
                "delivery_rate": "98%",
                "open_rate": "24%"
            },
            "sms_sender": {
                "sms_sent": parameters.get("recipient_count", 1),
                "delivery_rate": "99%",
                "response_rate": "12%"
            },
            "lead_qualifier": {
                "leads_processed": parameters.get("lead_count", 10),
                "qualified_leads": 7,
                "qualification_rate": "70%"
            },
            "payment_processor": {
                "payments_processed": parameters.get("payment_count", 1),
                "success_rate": "95%",
                "total_amount": "$1,250"
            }
        }
        
        result = execution_results.get(function_id, {"status": "executed", "message": "–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        activated_functions[function_id]["usage_count"] += 1
        activated_functions[function_id]["last_used"] = datetime.now().isoformat()
        
        print(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {function_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['email']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return {
            "success": True,
            "function_id": function_id,
            "execution_result": result,
            "executed_at": datetime.now().isoformat(),
            "message": f"–§—É–Ω–∫—Ü–∏—è {demo_data['ai_functions'][function_id]['name']} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")

# ==================== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.get("/api/v1/user/{user_id}/status")
async def get_user_status(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user = demo_data["users"].get(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "user": user,
        "current_step": "complete" if user.get("ai_functions_enabled") else "registration"
    }

@app.get("/api/v1/ai-functions/available")
async def get_available_functions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò —Ñ—É–Ω–∫—Ü–∏–π"""
    return {
        "functions": demo_data["ai_functions"],
        "total": len(demo_data["ai_functions"])
    }

@app.get("/api/v1/demo/full-flow")
async def get_full_flow_demo():
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏
    """
    flow_steps = [
        {
            "step": 1,
            "name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞",
            "description": "–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ",
            "endpoints": ["/api/v1/registration/start"],
            "files": ["frontend/index.html", "core-api/client_registration_service.py"],
            "details": [
                "–ö–ª–∏–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç email, –ø–∞—Ä–æ–ª—å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SMS –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ SIM800C –º–æ–¥—É–ª–∏"
            ]
        },
        {
            "step": 2,
            "name": "SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "description": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ SMS",
            "endpoints": ["/api/v1/registration/verify-sms"],
            "files": ["core-api/local_gsm_sms_service.py", "hardware/sim800c_manager.py"],
            "details": [
                "–ö–ª–∏–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π SMS –∫–æ–¥",
                "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ —á–µ—Ä–µ–∑ SIM800C",
                "–ü—Ä–∏ —É—Å–ø–µ—Ö–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            ]
        },
        {
            "step": 3,
            "name": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞",
            "description": "–í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
            "endpoints": ["/api/v1/consultation/assign-temp-phone"],
            "files": ["core-api/modem_management_service.py"],
            "details": [
                "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä",
                "–ù–∞–∑–Ω–∞—á–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ 30 –º–∏–Ω—É—Ç",
                "–ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
            ]
        },
        {
            "step": 4,
            "name": "–ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            "description": "–†–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "endpoints": ["/api/v1/consultation/simulate-call"],
            "files": ["voice-bridge/main.py", "voice-bridge/gemini_client.py", "voice-bridge/tts_engine.py"],
            "details": [
                "–ö–ª–∏–µ–Ω—Ç –∑–≤–æ–Ω–∏—Ç –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
                "SIM800C –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–≤–æ–Ω–æ–∫",
                "–ì–æ–ª–æ—Å–æ–≤–æ–π –º–æ—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ",
                "Gemini API –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á–∞–µ—Ç",
                "TTS –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ä–µ—á—å"
            ]
        },
        {
            "step": 5,
            "name": "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π",
            "description": "–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞",
            "endpoints": [],
            "files": ["core-api/agentic_function_service.py"],
            "details": [
                "–ò–ò –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞",
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
                "–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏",
                "–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º"
            ]
        },
        {
            "step": 6,
            "name": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            "endpoints": ["/api/v1/subscription/create-offer"],
            "files": ["core-api/revenue_engine.py"],
            "details": [
                "–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
                "–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π"
            ]
        },
        {
            "step": 7,
            "name": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
            "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Click API",
            "endpoints": ["/api/v1/payment/process-subscription"],
            "files": ["core-api/click_payment_service.py", "core-api/click_endpoints.py"],
            "details": [
                "–ö–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Click API (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ webhook",
                "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
            ]
        },
        {
            "step": 8,
            "name": "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π",
            "description": "–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "endpoints": ["/api/v1/ai-functions/activate"],
            "files": ["core-api/universal_agentic_functions.py", "core-api/business_agentic_functions.py"],
            "details": [
                "–ê–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
            ]
        },
        {
            "step": 9,
            "name": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò —Ñ—É–Ω–∫—Ü–∏–π",
            "description": "–†–∞–±–æ—Ç–∞ —Å –∞–≥–µ–Ω—Ç—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
            "endpoints": ["/api/v1/ai-functions/execute"],
            "files": ["core-api/comprehensive_agentic_service.py", "core-api/ai_tools_service.py"],
            "details": [
                "Email —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ SendGrid",
                "SMS —á–µ—Ä–µ–∑ SIM800C –º–æ–¥—É–ª–∏",
                "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
                "–ó–∞–∫–∞–∑ —Ç–∞–∫—Å–∏ —á–µ—Ä–µ–∑ Yandex API",
                "–ü–µ—Ä–µ–≤–æ–¥—ã —á–µ—Ä–µ–∑ Google Translate",
                "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"
            ]
        }
    ]
    
    return {
        "title": "VoiceConnect Pro - –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞",
        "description": "–û—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
        "total_steps": len(flow_steps),
        "flow_steps": flow_steps,
        "key_technologies": [
            "FastAPI (Python) - Backend API",
            "SIM800C GSM –º–æ–¥—É–ª–∏ - SMS/–ì–æ–ª–æ—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã",
            "Gemini API - –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏",
            "Click API - –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞",
            "PostgreSQL - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "Redis - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "WebRTC - –ì–æ–ª–æ—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            "TTS/STT - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏",
            "SendGrid - Email —Ä–∞—Å—Å—ã–ª–∫–∏",
            "Yandex APIs - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
        ],
        "architecture_components": [
            "core-api - –û—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞",
            "voice-bridge - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤",
            "modem-daemon - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SIM800C –º–æ–¥—É–ª—è–º–∏",
            "task-runner - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ ML",
            "frontend - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "dashboard - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        ]
    }

# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ VoiceConnect Pro")
    print("üìã –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –ò–ò —Ñ—É–Ω–∫—Ü–∏–π")
    print("üåê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://work-1-mdgxngtqgweewuld.prod-runtime.all-hands.dev")
    print("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://work-1-mdgxngtqgweewuld.prod-runtime.all-hands.dev/docs")
    print("üîÑ –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞: https://work-1-mdgxngtqgweewuld.prod-runtime.all-hands.dev/api/v1/demo/full-flow")
    
    uvicorn.run(
        "demo_main:app",
        host="0.0.0.0",
        port=12000,
        reload=True,
        access_log=True
    )