"""
Telegram API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Sales Bot
"""

from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from pydantic import BaseModel
from typing import Dict, List, Optional, Any
from datetime import datetime
import structlog
from auth import get_current_user
from models import User
from telegram_universal_bot import TelegramUniversalBot, create_universal_bot, ClientRequest
from telegram_sales_bot import TelegramSalesBot, create_sales_bot, TelegramMessage

logger = structlog.get_logger(__name__)

telegram_router = APIRouter(prefix="/telegram", tags=["telegram"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–æ–≤ (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ)
sales_bot: Optional[TelegramSalesBot] = None
universal_bot: Optional[TelegramUniversalBot] = None


class TelegramBotConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    bot_token: str
    notification_chat_id: str
    bot_type: str = "universal"  # "universal" –∏–ª–∏ "sales"
    enabled: bool = True


class CallProcessRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂"""
    phone_number: str
    summary: str
    duration: int
    client_name: Optional[str] = None
    modem_id: Optional[str] = None


class TelegramWebhookMessage(BaseModel):
    """Webhook —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram"""
    update_id: int
    message: Dict[str, Any]


class SalesStatsResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–¥–∞–∂"""
    success: bool
    stats: Optional[Dict[str, Any]] = None
    error: Optional[str] = None


@telegram_router.post("/configure-bot")
async def configure_telegram_bot(
    config: TelegramBotConfig,
    current_user: User = Depends(get_current_user)
):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂)
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not current_user.is_admin:
            raise HTTPException(status_code=403, detail="Admin access required")
        
        global sales_bot, universal_bot
        
        if config.enabled:
            if config.bot_type == "universal":
                # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
                universal_bot = create_universal_bot(config.bot_token, config.notification_chat_id)
                
                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                test_message = "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI Telegram Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∑–≤–æ–Ω–∫–æ–≤."
                success = await universal_bot._send_telegram_message(config.notification_chat_id, test_message)
                
                if not success:
                    raise HTTPException(status_code=400, detail="Failed to connect to Telegram")
                
                logger.info("Telegram universal bot configured", admin_id=current_user.id)
                
                return {
                    "success": True,
                    "message": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram Bot —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    "bot_type": "universal",
                    "bot_active": True
                }
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂
                sales_bot = create_sales_bot(config.bot_token, config.notification_chat_id)
                
                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                test_message = "ü§ñ Telegram Sales Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
                success = await sales_bot._send_telegram_message(config.notification_chat_id, test_message)
                
                if not success:
                    raise HTTPException(status_code=400, detail="Failed to connect to Telegram")
                
                logger.info("Telegram sales bot configured", admin_id=current_user.id)
                
                return {
                    "success": True,
                    "message": "Telegram Sales Bot —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    "bot_type": "sales",
                    "bot_active": True
                }
        else:
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–æ–≤
            if config.bot_type == "universal":
                universal_bot = None
                message = "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram Bot –æ—Ç–∫–ª—é—á–µ–Ω"
            else:
                sales_bot = None
                message = "Telegram Sales Bot –æ—Ç–∫–ª—é—á–µ–Ω"
            
            return {
                "success": True,
                "message": message,
                "bot_active": False
            }
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Failed to configure telegram bot", error=str(e))
        raise HTTPException(status_code=500, detail="Configuration failed")


@telegram_router.post("/process-call")
async def process_call_with_ai(
    request: CallProcessRequest,
    background_tasks: BackgroundTasks,
    bot_type: str = "universal",
    current_user: User = Depends(get_current_user)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é AI –±–æ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂)
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞
        call_data = {
            "phone_number": request.phone_number,
            "summary": request.summary,
            "duration": request.duration,
            "timestamp": datetime.now(),
            "client_name": request.client_name,
            "modem_id": request.modem_id
        }
        
        if bot_type == "universal":
            if not universal_bot:
                raise HTTPException(status_code=400, detail="Universal Telegram Bot not configured")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º
            background_tasks.add_task(
                universal_bot.process_client_call,
                call_data
            )
            
            message = "–ó–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º AI –±–æ—Ç–æ–º"
        else:
            if not sales_bot:
                raise HTTPException(status_code=400, detail="Sales Telegram Bot not configured")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–º –¥–ª—è –ø—Ä–æ–¥–∞–∂
            background_tasks.add_task(
                sales_bot.process_call_for_sales,
                call_data
            )
            
            message = "–ó–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–æ–º –¥–ª—è –ø—Ä–æ–¥–∞–∂"
        
        logger.info("Call processing started", 
                   phone_number=request.phone_number, 
                   bot_type=bot_type)
        
        return {
            "success": True,
            "message": message,
            "phone_number": request.phone_number,
            "bot_type": bot_type,
            "processing": "background"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Failed to process call", error=str(e))
        raise HTTPException(status_code=500, detail="Call processing failed")


@telegram_router.post("/webhook")
async def telegram_webhook(webhook_data: TelegramWebhookMessage):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
    """
    try:
        if not sales_bot:
            return {"ok": True, "message": "Bot not configured"}
        
        message_data = webhook_data.message
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        telegram_message = TelegramMessage(
            chat_id=str(message_data["chat"]["id"]),
            message_id=message_data["message_id"],
            text=message_data.get("text", ""),
            from_user=message_data["from"],
            timestamp=datetime.fromtimestamp(message_data["date"])
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await sales_bot.handle_incoming_message(telegram_message)
        
        return {"ok": True}
        
    except Exception as e:
        logger.error("Webhook processing failed", error=str(e))
        return {"ok": False, "error": str(e)}


@telegram_router.get("/stats", response_model=SalesStatsResponse)
async def get_bot_statistics(
    bot_type: str = "universal",
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂)
    """
    try:
        if bot_type == "universal":
            if not universal_bot:
                return SalesStatsResponse(
                    success=False,
                    error="Universal Telegram Bot not configured"
                )
            
            stats = await universal_bot.get_client_requests_stats()
        else:
            if not sales_bot:
                return SalesStatsResponse(
                    success=False,
                    error="Sales Telegram Bot not configured"
                )
            
            stats = await sales_bot.get_sales_statistics()
        
        return SalesStatsResponse(
            success=True,
            stats=stats
        )
        
    except Exception as e:
        logger.error("Failed to get bot statistics", error=str(e))
        return SalesStatsResponse(
            success=False,
            error="Failed to get statistics"
        )


@telegram_router.get("/bot-status")
async def get_bot_status(current_user: User = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–æ–≤
    """
    try:
        return {
            "universal_bot": {
                "configured": universal_bot is not None,
                "active": universal_bot is not None,
                "type": "universal"
            },
            "sales_bot": {
                "configured": sales_bot is not None,
                "active": sales_bot is not None,
                "type": "sales"
            },
            "last_check": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error("Failed to get bot status", error=str(e))
        raise HTTPException(status_code=500, detail="Status check failed")


@telegram_router.post("/send-message")
async def send_telegram_message(
    chat_id: str,
    message: str,
    bot_type: str = "universal",
    current_user: User = Depends(get_current_user)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
    –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        if not current_user.is_admin:
            raise HTTPException(status_code=403, detail="Admin access required")
        
        if bot_type == "universal":
            if not universal_bot:
                raise HTTPException(status_code=400, detail="Universal Telegram Bot not configured")
            success = await universal_bot._send_telegram_message(chat_id, message)
        else:
            if not sales_bot:
                raise HTTPException(status_code=400, detail="Sales Telegram Bot not configured")
            success = await sales_bot._send_telegram_message(chat_id, message)
        
        if success:
            return {
                "success": True,
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                "chat_id": chat_id,
                "bot_type": bot_type
            }
        else:
            raise HTTPException(status_code=400, detail="Failed to send message")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Failed to send telegram message", error=str(e))
        raise HTTPException(status_code=500, detail="Message sending failed")


class LeadUpdateRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞"""
    phone_number: str
    status: str  # contacted, qualified, proposal, closed_won, closed_lost
    notes: Optional[str] = None


@telegram_router.post("/update-lead")
async def update_lead_status(
    request: LeadUpdateRequest,
    current_user: User = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥–∞ –≤ CRM
        logger.info("Lead status updated", 
                   phone_number=request.phone_number, 
                   status=request.status,
                   user_id=current_user.id)
        
        return {
            "success": True,
            "message": "–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "phone_number": request.phone_number,
            "new_status": request.status
        }
        
    except Exception as e:
        logger.error("Failed to update lead status", error=str(e))
        raise HTTPException(status_code=500, detail="Lead update failed")


@telegram_router.get("/leads")
async def get_leads(
    limit: int = 50,
    offset: int = 0,
    urgency: Optional[str] = None,
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        return {
            "success": True,
            "leads": [],  # –ó–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏–¥—ã
            "total": 0,
            "limit": limit,
            "offset": offset
        }
        
    except Exception as e:
        logger.error("Failed to get leads", error=str(e))
        raise HTTPException(status_code=500, detail="Failed to get leads")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
def get_telegram_router():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py"""
    return telegram_router