version: '3.8'

services:
  # Redis for caching and message brokering
  redis:
    image: redis:7-alpine
    container_name: gemini-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gemini-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: gemini-postgres
    environment:
      POSTGRES_DB: geminivoiceconnect
      POSTGRES_USER: gemini
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gemini_secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gemini -d geminivoiceconnect"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gemini-network

  # Voice-Bridge (GPU-accelerated audio processing)
  voice-bridge:
    build:
      context: ./voice-bridge
      dockerfile: Dockerfile
    container_name: gemini-voice-bridge
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GPU_ENABLED=true
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - /tmp/voice-bridge:/tmp/voice-bridge
      - voice_models:/app/models
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python3", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - gemini-network

  # Core-API (Business logic and multi-tenant management)
  core-api:
    build:
      context: ./core-api
      dockerfile: Dockerfile
    container_name: gemini-core-api
    ports:
      - "8001:8001"
      - "9091:9091"
    environment:
      - DATABASE_URL=postgresql://gemini:${POSTGRES_PASSWORD:-gemini_secure_password}@postgres:5432/geminivoiceconnect
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - USE_LOCAL_GSM=true
      - SIM800C_PORT=/dev/ttyUSB0
      - SIM800C_BAUDRATE=9600
    volumes:
      - core_api_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gemini-network

  # Task-Runner (Celery background processing)
  task-runner:
    build:
      context: ./task-runner
      dockerfile: Dockerfile
    container_name: gemini-task-runner
    environment:
      - DATABASE_URL=postgresql://gemini:${POSTGRES_PASSWORD:-gemini_secure_password}@postgres:5432/geminivoiceconnect
      - REDIS_URL=redis://redis:6379/2
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - task_runner_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gemini-network

  # Dashboard (React frontend)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: gemini-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - core-api
      - voice-bridge
    networks:
      - gemini-network

  # Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: gemini-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - gemini-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gemini-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gemini-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: gemini-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - gemini-network

volumes:
  redis_data:
  postgres_data:
  voice_models:
  core_api_data:
  task_runner_data:
  traefik_letsencrypt:
  prometheus_data:
  grafana_data:

networks:
  gemini-network:
    driver: bridge