#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Telegram AI –±–æ—Ç–∞
"""

import asyncio
import json
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core-api
sys.path.append(os.path.join(os.path.dirname(__file__), 'core-api'))

from telegram_universal_bot import create_universal_bot

async def demo_universal_bot():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞
    """
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û TELEGRAM AI –ë–û–¢–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ (—Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    bot = create_universal_bot(
        bot_token="DEMO_BOT_TOKEN",
        notification_chat_id="DEMO_CHAT_ID"
    )
    
    print("\nüìã –î–û–°–¢–£–ü–ù–´–ï AI –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
    print("-" * 40)
    
    for tool_id, tool_info in bot.available_tools.items():
        print(f"\nüîß {tool_info['name']}")
        print(f"   üìù {tool_info['description']}")
        print(f"   ‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(tool_info['capabilities'])}")
    
    print(f"\n–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(bot.available_tools)}")
    
    print("\n" + "=" * 60)
    print("üìû –ü–†–ò–ú–ï–†–´ –û–ë–†–ê–ë–û–¢–ö–ò –ó–í–û–ù–ö–û–í –ö–õ–ò–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–≤–æ–Ω–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    test_calls = [
        {
            "phone_number": "+7900123456",
            "client_name": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
            "summary": "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å email —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∏—Å—å–º–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö –∏ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.",
            "duration": 180,
            "timestamp": datetime.now()
        },
        {
            "phone_number": "+7900654321",
            "client_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            "summary": "–í–ª–∞–¥–µ–ª–µ—Ü —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ —Ö–æ—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–µ–º–∞—Ö –≤ WhatsApp –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ª–µ—á–µ–Ω–∏—è.",
            "duration": 240,
            "timestamp": datetime.now()
        },
        {
            "phone_number": "+7900789012",
            "client_name": "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞",
            "summary": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å IT-–∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ—Å–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Trello –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ Slack.",
            "duration": 300,
            "timestamp": datetime.now()
        },
        {
            "phone_number": "+7900345678",
            "client_name": "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
            "summary": "–í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Ö–æ—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞.",
            "duration": 200,
            "timestamp": datetime.now()
        },
        {
            "phone_number": "+7900567890",
            "client_name": "–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞",
            "summary": "–î–∏—Ä–µ–∫—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–æ—Å–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å—ã, –æ—Ç–ø—Ä–∞–≤–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞.",
            "duration": 280,
            "timestamp": datetime.now()
        }
    ]
    
    for i, call_data in enumerate(test_calls, 1):
        print(f"\nüìû –ó–í–û–ù–û–ö #{i}")
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {call_data['client_name']}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {call_data['phone_number']}")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {call_data['duration']} —Å–µ–∫")
        print(f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {call_data['summary'][:100]}...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞
        print(f"\nü§ñ AI –ê–ù–ê–õ–ò–ó –ó–í–û–ù–ö–ê #{i}:")
        print("-" * 30)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
        analysis = await bot._simulate_ai_analysis(call_data['summary'])
        
        print(f"üí° –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
        for need in analysis['client_needs']:
            print(f"   ‚Ä¢ {need}")
        
        print(f"\nüéØ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        for action in analysis['requested_actions']:
            print(f"   ‚Ä¢ {action}")
        
        print(f"\nüìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis['priority'].upper()}")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['category']}")
        
        print(f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        for tool in analysis['recommended_tools']:
            tool_info = bot.available_tools.get(tool, {})
            print(f"   ‚Ä¢ {tool_info.get('name', tool)}")
        
        print(f"\nü§ñ AI –ó–ê–î–ê–ß–ò:")
        for j, task in enumerate(analysis['ai_tasks'], 1):
            print(f"   {j}. {task['description']}")
        
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: {analysis['next_steps']}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
        print(f"\nüí¨ –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£:")
        print("-" * 20)
        
        client_response = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call_data['client_name']}! üëã

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–≤–æ–Ω–æ–∫! –ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.

üí° –í–∞—à–∏ –∑–∞–¥–∞—á–∏:
{chr(10).join([f"‚Ä¢ {need}" for need in analysis['client_needs']])}

üéØ –ß—Ç–æ –º—ã —Å–¥–µ–ª–∞–µ–º:
{chr(10).join([f"‚Ä¢ {action}" for action in analysis['requested_actions']])}

‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis['priority']}
ü§ñ –ù–∞—à–∏ AI —Å–∏—Å—Ç–µ–º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏!

‚è∞ –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏:
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: 2-4 —á–∞—Å–∞
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: 1-2 –¥–Ω—è
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: 3-5 –¥–Ω–µ–π

–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ AI Call Center ü§ñ
"""
        print(client_response)
        
        print("\n" + "="*60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 40)
    
    categories = {}
    priorities = {}
    tools_usage = {}
    
    for call_data in test_calls:
        analysis = await bot._simulate_ai_analysis(call_data['summary'])
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category = analysis['category']
        categories[category] = categories.get(category, 0) + 1
        
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority = analysis['priority']
        priorities[priority] = priorities.get(priority, 0) + 1
        
        # –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool in analysis['recommended_tools']:
            tools_usage[tool] = tools_usage.get(tool, 0) + 1
    
    print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, count in categories.items():
        print(f"   {category}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print(f"\n‚ö° –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:")
    for priority, count in priorities.items():
        print(f"   {priority}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print(f"\nüîß –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    sorted_tools = sorted(tools_usage.items(), key=lambda x: x[1], reverse=True)
    for tool, count in sorted_tools[:5]:
        tool_info = bot.available_tools.get(tool, {})
        print(f"   {tool_info.get('name', tool)}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    
    print(f"\n–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {len(test_calls)}")
    print(f"–°–æ–∑–¥–∞–Ω–æ AI –∑–∞–¥–∞—á: {sum(len((await bot._simulate_ai_analysis(call['summary']))['ai_tasks']) for call in test_calls)}")
    
    print("\n" + "="*60)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –±–æ—Ç –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(demo_universal_bot())